################################################################################
# This file implements Nestler's code for testing the group level in SRM lenses.
# Nestler, S.(2015). Restricted maximum likelihood estimation for parameters of 
#                     the Social Relations Model. 
# 
# Authors: Prof. Avi Kluger
#          Sarit Pery
# 
# Code aim:
#    run LMM.SRM_MultivariatMultipleGroups function by Nestler on study's data
#    in this file's documentation, we'll alias the function name LMM.
#    
# Code structure:
#   functions for running and presenting the group-level analysis: 
#   1. buildLMMDataset: subsets and formats a single construct data.
#   2. runLMM:    follows Nestler's example: 
#                 sets the paramethers and runs the LMM function using a single 
#                 construct data.
#   3. LMMPublicationOutput: Builds on the LMM analysis results per construct, 
#                 and adds standardized estimates, t-values, and p-values.
#   4. rmle2Word: saves the study's rmle tables in a MSWord document.
#   5. adjustStudy2rmleFunctions: This function adjusts the dataset of any study
#                 to match the requirements of this code. This is to ensure this
#                 code will be implementable for the lab's SRM projects. 
# 
# Main:
#  For each Construct run the 3 functions.
#  If required export the full analysis to a word document.
#  Save an R image with the group-level data of the study.
################################################################################


# Clean the environment for a fresh start --------------------------------------
  rm(list = ls())                               #Clean the Global Environment
  cat ("\014")                                  #Clean the R console
  if (is.null(dev.list()) == FALSE) dev.off()   #Clean Plots


# Load data & packages ---------------------------------------------------------

  load("main.RImage")
  load(paste0(studyName, ".FullRR.ReadyforAnalaysis"))
  
  # Load the LLM function from source Code by Nestler, S.(2015).
  # The original source code includes an example that we commented out.
  source("SRM_Multivariat_Multiple Groups by Nestler.r") 
  
  ipak (c("magic", "Matrix", "apaTables", "TripleR", "tidyverse"))

# Utility parameters and functions ---------------------------------------------

  writeDoc <- TRUE             # if TRUE a MSWord doc will be created with results 
  
  idCols <-     c("a.id", "p.id", "group.id", "Actor", "Partner")
  constructs <- c("H", "Creat", "Contrib", "Sf") # only biVariate constructs
  consNames <-  c("Humility", "Creativity", "Contribution", "Psych Safety") 
  
adjustStudy2rmleFunctions <- function(x){
  return(x)
}
buildLMMDataset <- function(cons, dataset = x){

  # 1. identify the relevant columns, and subset the data ----------------------
  varcols <- grep(paste0(cons, ".$"), names(dataset), value = TRUE)
  if (length(varcols) == 0) {
    print(paste("\nWarning:\n RMLE analysis is provided for variables measured",
                "by at least two items\n"))
    return()}
  d <- dataset[,c(idCols, varcols)]

  # 2. make the data longer: each item becomes an Occassion in a separate row
  #    the names are set according to Nestler's example for easy review.
  #    Wert means value.

  d <- pivot_longer(d, cols = any_of(varcols), names_to = "Occassion",
                        values_to = "Wert", names_pattern = "(.)$")
  # drop NA rows
  d <- na.omit(d)
  
  # 3. set a numbering for each dyad in the groups -----------------------------
  d$dyad <- apply(d[,c("Actor", "Partner")], 1, 
                      function (m) {10*min(m) + max(m)})
  d$dyad <- as.numeric(as.factor(d$dyad)) 
  d <- select(d, -all_of(c("Actor", "Partner")))
  
  return(d)
} # End of buildLMMDataset function

runLMM <- function(daten){
  # This code is taken directly from Nestler's example
  # with additional documentation, and 
  # additional validity tests for the data.
  
  #adjust names of daten to match Nestler's 
  daten <- daten %>% 
    rename(Group = group.id, Dyad = dyad, Actor = a.id, Partner = p.id)
  
  # for the sake of analysis, keep only ratings where both dyad members rated
  # each other on all occasions. 
  daten <- daten %>% mutate(gd = paste0(Group, ":", Dyad)) 
  occasions <- length(unique(daten$Occassion))
  validDyads <- as.data.frame(table(daten$gd))
  validDyads <- validDyads[validDyads$Freq == 2*occasions,]
  daten <- daten[daten$gd %in% validDyads$Var1, ]
  
  # calculate the actual n,k,d and number of rows used for the rmle analysis.
  nkd <- list(n = length(unique(daten$Actor)), 
              k = length(unique(daten$Group)),
              d = 2*length(unique(daten$gd)),
              nr = nrow(daten))
  
  # Sort the data according to the matrix formulation of the SRM
  
  daten <- daten[order(daten$Group,daten$Actor,daten$Partner,daten$Dyad,daten$Occassion),]
  daten.1 <- subset(daten,daten$Actor < daten$Partner)
  daten.1 <- daten.1[order(daten.1$Group,daten.1$Actor,daten.1$Partner,daten.1$Dyad,daten.1$Occassion),]
  daten.2 <- subset(daten,daten$Actor > daten$Partner)
  daten.2 <- daten.2[order(daten.2$Group,daten.2$Dyad,daten.2$Occassion),]
  daten   <- rbind(daten.1,daten.2)                                                
  
  # Compute design matrices
  
  # Zg is a dummy code matrix for rows-groups.
  # It has a column for each group, a row for each row in daten1
  # the value in Zg is 1 for the right group-column, 0 for all the rest of the columns.
  Zg <- with(daten.1, outer(Group, unique(Group), '==')*1)
  groups <- unique(daten.1$Group)
  for (i in 1:length(groups)) {  # for each group  
    gid <- groups[i]
    g    <- subset(daten.1,daten.1$Group==gid) # a single group in daten1
    dtg <- daten[daten$Group==gid,] # the group's data in the full daten 
    
    # Individual level validity check:
    # For the sake of analysis, the number of actors and partners is equal in 
    # the groups. 
    # The code supports different naming for actors/partners, but not a different 
    # list of actors/partners. 
    # Since in our studies actors/partners have the same names, we shall 
    # verify the lists are identical.
    aps <- intersect(dtg$Actor, dtg$Partner)
    
    # Dyadic level validity check:
    # For the sake of analysis, the rows in m.Z3 must include a reference to all
    # the dyads that have a value in daten$Wert.
    # Though it might be that this dyad's rating only appears in daten2 (missing
    # value, where one dyad member didn't rate the other)
    
    # the following matrices are dummy codes for actor, partner and dyad
    # where the columns are the full list of a/p/d in the group in daten
    # the rows are the daten1 group's rows
    # and the value is 1 if this is the right a/p/d column and 0 otherwise.
    m.Z1 <- with(g, outer(Actor, sort(aps), '==')*1)
    m.Z2 <- with(g, outer(Partner, sort(aps), '==')*1)
    m.Z3 <- with(g, outer(Dyad, sort(unique(dtg$Dyad)), '==')*1)
    
    # Z1-Z3 will hold respectively, the a/p/d matrices, 
    #   bound together corner-to-corner.
    if (i == 1) { Z1 <- m.Z1; Z2 <- m.Z2; Z3 <- m.Z3;
    } else { Z1 <- adiag(Z1, m.Z1); Z2 <- adiag(Z2,m.Z2); Z3 <- adiag(Z3,m.Z3)}
  }
  
  if(!all (dim(Z1) == dim(Z2))) {
    print(paste0("\nError: The actors and partners list should be the same,",
                 "which is not the case. \n ",
                 "Please clean the data and re-run the analysis.\n",
                 "Execution aborted"))
    return()}
  if(dim(Z3)[1] * 2 != length(daten$Wert)) {
    print(paste0("\nError: The dyads list should be at the same,",
                 "length as the values list. \n ",
                 "Please review recommended actions above and re-run the ",
                 "analysis.\nExecution aborted"))
    return()}
  
  # Get X and y
    # x, y are matrices of size 1X(values length).
    # x has 1s as its data
    # y holds all the ratings.
    # This means, that y, Zg, Z1-Z3 together hold all the required data for analysis.
    # together they have the data with group, and a,p,d information. 
    X <- matrix(data=1, ncol=1, nrow=length(daten$Wert)) 
    y <- as.matrix(daten$Wert)
    
    # Call the function to estimate the SRM parameters. 
    # Please note that the function allows you to change 
    # (a) the starting values of the variance components (the starts-vector), 
    # (b) the convergence criterion of the Fisher scoring algorithm (difcrit), 
    # (c) the number of iterations of the algorithm (maxit), and
    # (d) you can choose between unconstrained maximization of the log-likelihood 
    #     (TypeOfConstrain=0) or unconstrained maximization and later replacement 
    #     of inadmissable estimates with admissible ones.    
    
    #LMM.SRM_MultivariatMultipleGroups(starts=c(1,1,1,0,1,0,1,0),y,X,Zg,
    #                         Z1,Z2,Z3,difcrit=10e-5,maxit=20,TypeOfConstrain=0)
    
    # Estimate SRM parameters with replacement of inadmissible estimates after 
    # convergence with admissible estimates
    fit <- LMM.SRM_MultivariatMultipleGroups(starts=c(1,1,1,0,1,0,1,0),y,X,
                                             Zg,Z1,Z2,Z3,difcrit=10e-5,maxit=20,
                                             TypeOfConstrain=1)
    return(list(fit = fit, nkd = nkd))
} # End of runLMM function

LMMPublicationOutput <- function(fit, d, consName, nkd, 
                                 percTargetTerminology = FALSE){
  # This function receives the RMLE analysis results per construct, 
  #   and adds standardized estimates, t-values, and p-values. 
  #   It also adds the number of groups, participants, and dyads.
  #   if  APTerminology = FALSE the headings change to perceiver-target.
 
  est <- as.data.frame(fit[[3]])  # est for estimates. get random effects.

  # calculate standardized variances:
  varRows <- grep(" var", est$Parameter)
  totalVariance <- sum(est$Estimate[varRows])
  est$standardized <- est$Estimate
  est$standardized [varRows] <- (est$Estimate [varRows] ) / totalVariance 
  
  # calculate standardized covariances:
  est$standardized [4] <- est$Estimate [4]/  #a-p cov / (actor var * partner var)
    (est$Estimate [2] * est$Estimate [3])
  est$standardized [6] <- est$Estimate [6]/ est$Estimate [5]
  est$standardized [8] <- est$Estimate [8]/ est$Estimate [7]

  # calculate t value, p.value
  est$t <- est$Estimate / est$SE 
  est$p <- (1- pt(abs(est$t) , nkd$nr)) *2

  # format resutls
  ipak("weights")
  est[, -1] <- round(est[, -1], 3) #keep 3 digits only
  est$p <- rd(est$p, digits = 3, max = 2) # drop leading zero from p.value
  est$p <- ifelse (as.numeric(est$p) == 0, "<.001", est$p) # if zero write <.001
  
  est$standardized <- rd(est$standardized, digits = 3, add = FALSE) # drop leading zero
  
  if (percTargetTerminology <- TRUE) {
    est$Parameter <- gsub("Actor", "Perceiver", est$Parameter)
    est$Parameter <- gsub("Partner|Parner", "Target", est$Parameter)
  }
  
  # calculate k, n, number of dyads
  noteText <- paste0("Note. N = ", nkd$n, " participants embedded in ", nkd$k, 
                     " round robins providing ", nkd$d, 
                     " dyadic ratings.‎")
  a <- paste0(c("\n",consName, ": SRM estimates based on RMLE\n\n"))
  cat(a)
  print(est)
  print(noteText)
  result <- list(consName = consName, est = est, nkd = nkd, noteText = noteText)
  return(result)
}

rmle2Word <- function(rmlelist, fileName = ""){
  ipak("rtf")
  rmleF <- RTF(fname(fileName, fileExtention = ".doc"))
  addHeader.RTF(rmleF, "Study group-level SRM Analysis")
  for (i in 1:length(constructs)) {
    res <- rmlelist[[i]]
    # the addParagraph doesn't work in a loop. 
    headerCons <- paste0(c("\n",res$consName, ": SRM estimates based on RMLE\n"))
    addParagraph.RTF(rmleF, headerCons)
    
    # Bypass for header: 
    t <- as.data.frame(res$est)
    names(t) <- gsub("Parameter", res$consName,names(t))
    addTable(rmleF, t)
    
    # add a note below each table
    addText.RTF(rmleF, "\nNote. ")
    addText.RTF(rmleF, paste0("N = ", res$nkd$n), italic = TRUE)
    addText.RTF(rmleF, paste0("  participants embedded in ", res$nkd$k, 
                              " round robins providing ", res$nkd$d, 
                              " dyadic ratings.\n"))
  }
  done(rmleF)
} # End of rmle2Word function

################################################################################
##                       MAIN PROGRAM                                        ###
################################################################################
  
rmleRes <- list() #An RMLE set of results will be stored here for each construct.

x <- adjustStudy2rmleFunctions(x)
# run RMLE analysis for each construct:
for (i in 1:length(constructs)) {
  xcons <- buildLMMDataset(cons = constructs[i])
  fit.nkd <- runLMM(xcons)
  rmleRes[[i]] <- LMMPublicationOutput(fit.nkd$fit, d = xcons, 
                                       nkd = fit.nkd$nkd,
                                       percTargetTerminology = percTargetTerminology,
                                       consName = consNames[i])
} 

if (writeDoc) rmle2Word(rmleRes, fileName = paste0(studyName, " groupsRmle"))

rm(list = setdiff(ls(), c("rmleRes", "x")))
load("main.RImage")
save.image(paste0(studyName, "Rmle.RImage"))
